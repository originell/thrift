From d99694e3a7248176d6236cef7d1aa7b311f45985 Mon Sep 17 00:00:00 2001
From: David Reiss <dreiss@facebook.com>
Date: Mon, 30 Mar 2009 18:07:25 -0700
Subject: [PATCH] python: Remove ridiculous semicolons from gen-code

---
 compiler/cpp/src/generate/t_py_generator.cc |   20 ++++++++++----------
 1 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/compiler/cpp/src/generate/t_py_generator.cc b/compiler/cpp/src/generate/t_py_generator.cc
index b1aacfe..04f4331 100644
--- a/compiler/cpp/src/generate/t_py_generator.cc
+++ b/compiler/cpp/src/generate/t_py_generator.cc
@@ -1201,7 +1201,7 @@ void t_py_generator::generate_service_client(t_service* tservice) {
             indent() << "return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, \"" << (*f_iter)->get_name() << " failed: unknown result\"))" << endl;
         } else {
           f_service_ <<
-            indent() << "raise TApplicationException(TApplicationException.MISSING_RESULT, \"" << (*f_iter)->get_name() << " failed: unknown result\");" << endl;
+            indent() << "raise TApplicationException(TApplicationException.MISSING_RESULT, \"" << (*f_iter)->get_name() << " failed: unknown result\")" << endl;
         }
       }
 
@@ -1720,34 +1720,34 @@ void t_py_generator::generate_deserialize_field(ofstream &out,
         break;
       case t_base_type::TYPE_STRING:
         if (((t_base_type*)type)->is_binary()) {
-          out << "readBinary();";
+          out << "readBinary()";
         } else {
-          out << "readString();";
+          out << "readString()";
         }
         break;
       case t_base_type::TYPE_BOOL:
-        out << "readBool();";
+        out << "readBool()";
         break;
       case t_base_type::TYPE_BYTE:
-        out << "readByte();";
+        out << "readByte()";
         break;
       case t_base_type::TYPE_I16:
-        out << "readI16();";
+        out << "readI16()";
         break;
       case t_base_type::TYPE_I32:
-        out << "readI32();";
+        out << "readI32()";
         break;
       case t_base_type::TYPE_I64:
-        out << "readI64();";
+        out << "readI64()";
         break;
       case t_base_type::TYPE_DOUBLE:
-        out << "readDouble();";
+        out << "readDouble()";
         break;
       default:
         throw "compiler error: no PHP name for base type " + t_base_type::t_base_name(tbase);
       }
     } else if (type->is_enum()) {
-      out << "readI32();";
+      out << "readI32()";
     }
     out << endl;
 
-- 
1.5.4.3

